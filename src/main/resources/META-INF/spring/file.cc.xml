<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <routeContext xmlns="http://camel.apache.org/schema/spring" id="file">

        <route id="edifact2xml" errorHandlerRef="deadLetterErrorHandler" autoStartup="true">
            <from uri="file:{{fs.root}}/edifact2xml.in/" />
            <process ref="edifact2xml" />
            <to uri="file:{{fs.root}}/edifact2xml.out/" />
        </route>

        <route id="xml2edifact" errorHandlerRef="deadLetterErrorHandler" autoStartup="true">
          <from uri="file:{{fs.root}}/xml2edifact.in/" />
          <process ref="xml2edifact" />
          <to uri="file:{{fs.root}}/xml2edifact.out/" />
        </route>


        <route id="xsltExtensionFunctionsTest" errorHandlerRef="deadLetterErrorHandler" autoStartup="true">
            <from uri="file:{{fs.root}}/xslt-test.in/" />
                <to uri="xslt-saxon:file:data/mappings/tests/extensionFunctions.xslt?saxonExtensionFunctions=#translate,#log" />
            <to uri="file:{{fs.root}}/xslt-test.out/" />
        </route>



        <route id="demoRoutingSlip" errorHandlerRef="deadLetterErrorHandler" autoStartup="true">
            <from uri="file:{{fs.root}}/routingSlipIn/" />

                <process ref="messageAnalyser" />
                <process ref="messageProcessorRuleLoader" />

                <routingSlip uriDelimiter="ยง" ignoreInvalidEndpoints="false">
                    <header>X-MESCEDIA-RoutingSlip</header>
                </routingSlip>

                <log message="header.Transaction-Id: ${header.Transaction-Id}" />
                <log message="header.X-MESCEDIA-RoutingSlipDestination: ${header.X-MESCEDIA-RoutingSlipDestination}" />
            <!-- <to uri="file:{{fs.root}}/routingSlipOut/?fileName=${date:now:yyyyMMddHHmmssSSS}-${header.Transaction-Id}" /> -->

            <toD uri="${header.X-MESCEDIA-RoutingSlipDestination}" />
        </route>


        <!-- polling only in folders in ftps user path -> /opt/COM/ftps/$user/in/ -->
        <route id="allFtpsInFolders" errorHandlerRef="deadLetterErrorHandler" autoStartup="true" >
            <from uri="file:///opt/COM/ftps/?recursive=true&amp;antInclude=**/in**/*&amp;minDepth=2&amp;maxDepth=3" />


                <log message="CamelFileNameOnly: ${header.CamelFileNameOnly} " />
                <log message="CamelFileParent: ${header.CamelFileParent} " />
                <log message="Searching rule for [Path: ${header.CamelFileParent} - FileName: ${header.CamelFileNameOnly}]" />

                <log message="messageHistory: ${messageHistory(true)} " />

            <to uri="mock:devnull"/>
        </route>


        <!-- fl orders 2 pojo -->
        <!--
        <route id="orders_fl_in" errorHandlerRef="deadLetterErrorHandler" autoStartup="true" >
            <from uri="file:{{fs.root}}/ORDERS_FL.in/" />
                <unmarshal>
                    <bindy type="Fixed" locale="de-DE" classType="org.mescedia.bindings.Orders_Fl2Xml" unwrapSingleInstance="false" />
                </unmarshal>
                <convertBodyTo type="String"></convertBodyTo>
                <log message="${body}"/>
            <to uri="file:{{fs.root}}/ORDERS_FL.out/" />
        </route>
        -->


        <!--
             todo: fixedLength not working jet ...
        -->
        <route id="orders_fl_in" errorHandlerRef="deadLetterErrorHandler" autoStartup="true" >
            <from uri="file:{{fs.root}}/ORDERS_FL.in/" />


            <unmarshal>
                <bindy type="Fixed" locale="de-DE" classType="org.mescedia.bindings.Orders_Fl2Xml"  />
            </unmarshal>
            <!--
            <marshal>
                <bindy type="Fixed" locale="de-DE" classType="org.mescedia.bindings.Orders_Fl2Xml"  />
            </marshal>
            <to uri="dataformat:ordersBindy:unmarshal?ref=ordersBindy"/>
            type="Fixed" locale="de-DE" classType="org.mescedia.bindings.Orders_Fl2Xml"


            <to uri="dataformat:ordersBindy:unmarshal"/>
            -->
            <log message="${body}"/>

            <!-- optional step if bindy and jaxb class is the same
                 but this requires camel-jaxb in pom.xml in order to output xml: tested with camel v3.18.8
            <to uri="dataformat:ordersJaxbPositions:marshal"/>
            <log message="${body}"/>

            -->


            <!--
            <to uri="dataformat:ordersPosition:marshal"/>
            <log message="${body}"/>
            -->


            <to uri="file:{{fs.root}}/ORDERS_FL.out/" />

        </route>


        <route id="schematronTest_ORDERS_D96A_UN">
            <from uri="file:{{fs.root}}/schematronTest_ORDERS_D96A_UN.in/" />

            <to uri="schematron:{{fs.root}}/schematron/schematronTest_ORDERS_D96A_UN.sch" />
            <log message="${in.header.CamelSchematronValidationReport}"/>
            <setBody>
                <simple trim="true">
                    ${in.header.CamelSchematronValidationReport}
                </simple>
            </setBody>
            <log message="${body}"/>
            <log message="${in.header.CamelSchematronValidationStatus}"/>
            <to uri="file:{{fs.root}}/schematronTest_ORDERS_D96A_UN.out/" />
        </route>

    </routeContext>

</beans>
